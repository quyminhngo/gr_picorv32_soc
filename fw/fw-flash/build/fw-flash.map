
Allocating common symbols
Common symbol       size              file

i                   0x4               build/firmware.o

Discarded input sections

 .text          0x0000000000000000        0x0 build/firmware.o
 .data          0x0000000000000000        0x0 build/firmware.o
 .bss           0x0000000000000000        0x0 build/firmware.o
 .text.print_dec.part.0.constprop.3
                0x0000000000000000       0x10 build/firmware.o
 .text.putchar  0x0000000000000000       0x20 build/firmware.o
 .text.print    0x0000000000000000       0x40 build/firmware.o
 .text.print_hex
                0x0000000000000000      0x298 build/firmware.o
 .text.print_dec
                0x0000000000000000      0x230 build/firmware.o
 .text.getchar_prompt
                0x0000000000000000       0xcc build/firmware.o
 .text.getchar  0x0000000000000000       0x20 build/firmware.o
 .text.cmd_set_crm
                0x0000000000000000       0x38 build/firmware.o
 .text.cmd_get_crm
                0x0000000000000000       0x14 build/firmware.o
 .text.cmd_set_dspi
                0x0000000000000000       0x38 build/firmware.o
 .text.cmd_get_dspi
                0x0000000000000000       0x14 build/firmware.o
 .text.cmd_read_flash_id
                0x0000000000000000      0x1d4 build/firmware.o
 .text.cmd_benchmark
                0x0000000000000000      0x894 build/firmware.o
 .text.cmd_benchmark_all
                0x0000000000000000      0x9e4 build/firmware.o
 .rodata.cmd_benchmark.str1.4
                0x0000000000000000       0x23 build/firmware.o
 .rodata.cmd_benchmark_all.str1.4
                0x0000000000000000       0x4e build/firmware.o
 .rodata.print_dec.str1.4
                0x0000000000000000        0x6 build/firmware.o
 .rodata.print_hex.str1.4
                0x0000000000000000       0x11 build/firmware.o
 .sdata.spi_flashio
                0x0000000000000000        0x4 build/firmware.o
 COMMON         0x0000000000000000        0x4 build/firmware.o
 .data          0x0000000000000000        0x0 build/crt_flash.o
 .bss           0x0000000000000000        0x0 build/crt_flash.o

Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x0000000000000000 0x0000000000800000 xr
RAM              0x0000000040000000 0x0000000000002000 xrw
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD build/firmware.o
LOAD build/crt_flash.o
LOAD c:/8.2.0-2.1-20190425-1021/bin/../lib/gcc/riscv-none-embed/8.2.0/rv32i/ilp32\libgcc.a
                0x0000000000000400                _stack_size = DEFINED (_stack_size)?_stack_size:0x400
                0x0000000000000000                _heap_size = DEFINED (_heap_size)?_heap_size:0x0

.vector         0x0000000000000000        0x0
                0x0000000000000000                . = ALIGN (0x4)
 *crt.o(.text)

.text           0x0000000000000000      0x1b0
                0x0000000000000000                . = ALIGN (0x4)
 *(.text)
 .text          0x0000000000000000      0x130 build/crt_flash.o
                0x0000000000000000                crtStart
                0x0000000000000010                trap_entry
 *(.text*)
 .text.startup.main
                0x0000000000000130       0x7c build/firmware.o
                0x0000000000000130                main
 .text.irqCallback
                0x00000000000001ac        0x4 build/firmware.o
                0x00000000000001ac                irqCallback
 *(.rodata)
 *(.rodata*)
 *(.srodata)
 *(.srodata*)
 *(.eh_frame_hdr)
 *(.eh_frame)
                0x00000000000001b0                . = ALIGN (0x4)
                0x00000000000001b0                _etext = .
                0x00000000000001b0                _sidata = _etext

.rela.dyn       0x00000000000001b0        0x0
 .rela.text     0x00000000000001b0        0x0 build/firmware.o

.rodata
 *(.rdata)
 *(.rodata .rodata.*)
 *(.gnu.linkonce.r.*)

.ctors          0x00000000000001b0        0x0
                0x00000000000001b0                . = ALIGN (0x4)
                0x00000000000001b0                _ctors_start = .
 *(.init_array*)
 *(SORT_BY_NAME(.ctors.*))
 *(.ctors)
                0x00000000000001b0                . = ALIGN (0x4)
                0x00000000000001b0                _ctors_end = .

.data           0x0000000040000000        0x0 load address 0x00000000000001b0
                0x0000000040000000                . = ALIGN (0x4)
                0x0000000040000000                _sdata = .
                0x0000000040000000                _ram_start = .
                0x0000000040000000                . = ALIGN (0x4)
 *(.data)
 *(.data*)
 *(.gnu.linkonce.d.*)
                0x0000000040000000                . = ALIGN (0x8)
                0x0000000040000800                PROVIDE (__global_pointer$ = (. + 0x800))
 *(.sdata)
 *(.sdata*)
 *(.gnu.linkonce.s.*)
                0x0000000040000000                . = ALIGN (0x4)
                0x0000000040000000                _edata = .

.bss            0x0000000040000000        0x0
                0x0000000040000000                . = ALIGN (0x4)
                0x0000000040000000                _bss_start = .
 *(.bss)
 *(.bss*)
 *(.sbss)
 *(.sbss*)
 *(.gnu.linkonce.sb.*)
 *(.gnu.linkonce.b.*)
 *(COMMON)
                0x0000000040000000                . = ALIGN (0x4)
                0x0000000040000000                _bss_end = .
                0x0000000040000000                _end = .
                [!provide]                        PROVIDE (end = .)

.heap           0x0000000040000000        0x0
                0x0000000040000000                . = ALIGN (0x8)
                [!provide]                        PROVIDE (_heap_start = .)
                0x0000000040000000                . = (. + _heap_size)
                0x0000000040000000                . = ALIGN (0x8)
                [!provide]                        PROVIDE (_heap_end = .)

.stack          0x0000000040000000      0x400
                0x0000000040000000                . = ALIGN (0x10)
                [!provide]                        PROVIDE (_stack_end = .)
                0x0000000000000400                . = _stack_size
 *fill*         0x0000000040000000      0x400 
                0x0000000040000400                . = ALIGN (0x10)
                0x0000000040000400                PROVIDE (_stack_start = .)
OUTPUT(build/fw-flash.elf elf32-littleriscv)

.debug_info     0x0000000000000000     0x13a3
 .debug_info    0x0000000000000000     0x137d build/firmware.o
 .debug_info    0x000000000000137d       0x26 build/crt_flash.o

.debug_abbrev   0x0000000000000000      0x412
 .debug_abbrev  0x0000000000000000      0x3fe build/firmware.o
 .debug_abbrev  0x00000000000003fe       0x14 build/crt_flash.o

.debug_loc      0x0000000000000000     0x2dc5
 .debug_loc     0x0000000000000000     0x2dc5 build/firmware.o

.debug_aranges  0x0000000000000000       0xb8
 .debug_aranges
                0x0000000000000000       0x98 build/firmware.o
 .debug_aranges
                0x0000000000000098       0x20 build/crt_flash.o

.debug_ranges   0x0000000000000000      0xd30
 .debug_ranges  0x0000000000000000      0xd30 build/firmware.o

.debug_line     0x0000000000000000     0x4a59
 .debug_line    0x0000000000000000     0x4881 build/firmware.o
 .debug_line    0x0000000000004881      0x1d8 build/crt_flash.o

.debug_str      0x0000000000000000      0x2ac
 .debug_str     0x0000000000000000      0x294 build/firmware.o
                                        0x2f6 (size before relaxing)
 .debug_str     0x0000000000000294       0x18 build/crt_flash.o
                                         0x51 (size before relaxing)

.comment        0x0000000000000000       0x39
 .comment       0x0000000000000000       0x39 build/firmware.o
                                         0x3a (size before relaxing)

.debug_frame    0x0000000000000000      0x154
 .debug_frame   0x0000000000000000      0x154 build/firmware.o
